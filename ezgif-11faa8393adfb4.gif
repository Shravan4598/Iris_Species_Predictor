{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb28200a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a67a47d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width      species\n",
       "0           5.1          3.5           1.4          0.2  Iris-setosa\n",
       "1           4.9          3.0           1.4          0.2  Iris-setosa\n",
       "2           4.7          3.2           1.3          0.2  Iris-setosa\n",
       "3           4.6          3.1           1.5          0.2  Iris-setosa\n",
       "4           5.0          3.6           1.4          0.2  Iris-setosa"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(\"IRIS.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1c77ce35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 5)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c2b83cb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sepal_length', 'sepal_width', 'petal_length', 'petal_width',\n",
       "       'species'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14036fdd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   sepal_length  150 non-null    float64\n",
      " 1   sepal_width   150 non-null    float64\n",
      " 2   petal_length  150 non-null    float64\n",
      " 3   petal_width   150 non-null    float64\n",
      " 4   species       150 non-null    object \n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 6.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0df2f962",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal_length    0\n",
       "sepal_width     0\n",
       "petal_length    0\n",
       "petal_width     0\n",
       "species         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "250458ef",
   "metadata": {},
   "source": [
    "### There is no missing Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e2e93d2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       sepal_length  sepal_width  petal_length  petal_width\n",
       "count    150.000000   150.000000    150.000000   150.000000\n",
       "mean       5.843333     3.054000      3.758667     1.198667\n",
       "std        0.828066     0.433594      1.764420     0.763161\n",
       "min        4.300000     2.000000      1.000000     0.100000\n",
       "25%        5.100000     2.800000      1.600000     0.300000\n",
       "50%        5.800000     3.000000      4.350000     1.300000\n",
       "75%        6.400000     3.300000      5.100000     1.800000\n",
       "max        7.900000     4.400000      6.900000     2.500000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c9c59b40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal_length  sepal_width  petal_length  petal_width  species        \n",
       "4.9           3.1          1.5           0.1          Iris-setosa        3\n",
       "5.8           2.7          5.1           1.9          Iris-virginica     2\n",
       "              4.0          1.2           0.2          Iris-setosa        1\n",
       "5.9           3.0          4.2           1.5          Iris-versicolor    1\n",
       "6.2           3.4          5.4           2.3          Iris-virginica     1\n",
       "                                                                        ..\n",
       "5.5           2.3          4.0           1.3          Iris-versicolor    1\n",
       "              2.4          3.7           1.0          Iris-versicolor    1\n",
       "                           3.8           1.1          Iris-versicolor    1\n",
       "              2.5          4.0           1.3          Iris-versicolor    1\n",
       "7.9           3.8          6.4           2.0          Iris-virginica     1\n",
       "Name: count, Length: 147, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8569ac06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "species\n",
       "Iris-setosa        50\n",
       "Iris-versicolor    50\n",
       "Iris-virginica     50\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"species\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "20c8c8b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='species', ylabel='count'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Tfruu+80YsSIK8717rvvavHixXr11Vd18OBBrV+/Xp06dapyjoqKCiUmJiojI0OrVq3Svn37NH/+fDVu3FiStGvXLo0YMUKjRo3S3r175XK5NHv2bHeg/1RtjnNJ+vrrr/X2229r7dq1XI6tR9f7GK3K2bNnlZycrD//+c/Kzs5WSEiIHnroIX377bfaunWr1q5dq9dee61WITFr1iw9++yzysrKUlRUlEaPHq0LFy5Uue3GjRs1fPhwDR48WLt379bmzZvVo0cP9/ry8nLNmzdPe/bs0fr165Wbm6vx48fXOIORLBhh3Lhx1tChQy3Lsqy4uDira9eulbaRZK1bt86yLMv69a9/bfXr18+qqKio1f6vtP3mzZutwMBA69y5cx7L/+3f/s169dVXLcuyrDlz5lhdunTxWJ+ammo1btzYOnbsmHtZdna2JcnasWOHZVmWFRAQYK1YsaJWM1qWZQ0aNMh65plnar09rk5DH2eLFi2y2rVr536ek5NjSbKys7Mty7Ks2bNnWwkJCR6vycvLsyRZOTk51c61cOFCKyoqyiovL6/yfSMiIqzFixdblmVZf//7361GjRq59/dTY8aMsQYOHOixbNq0aVZ0dHSV+6vNcT5nzhzrpptusgoLC6t8T9Set4/Rjz/+2JJknTx50rIsy1q+fLklycrKynK/Zv/+/ZYkKzMz073s4MGDliT3cfPTOXNzcy1J1p///Gf3+kvH0f79+93vFRQU5F7fq1cva+zYsbX657Isy9qxY4clySopKan1a0zBmRlDXV7fVRk/fryysrJ0xx136KmnnlJqaqp73RNPPCF/f3/3o6btd+3apdOnT6tFixYer8vNzdWhQ4eqnWH//v0KDw9XeHi4e1l0dLRuueUW7d+/X9KPv3vr0Ucf1YABAzR//nyP/V28eFEvv/yyOnfu7H7v1NRUHTt27Oo+LNRZfR9no0aN0tGjR7V9+3ZJ0ptvvqmuXbsqOjpa0o/H2scff+zxuvbt20uSx7Hx07keeOABlZaWql27dnrssce0bt26av82m5WVpdatWysqKqrK9fv371fv3r09lvXu3VsHDx7UxYsXq9y+puNckiIiInzu3p0bwfU+RqvSpEkTde7c2f08JydHfn5+6tatm3vZ7bffXqubfS/fT6tWrSSp2jM6WVlZ6t+/f7X72r17t4YOHaqIiAgF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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = 'species', data = data )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2b4bf4f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'species count'}, ylabel='species'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['species'].value_counts().plot(kind='barh', color=['red','green','yellow'], title='species count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "46e192f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='sepal_length', ylabel='sepal_width'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x ='sepal_length', y = 'sepal_width', hue ='species', data = data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "37d2e8db",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.replace({'species':{'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2}}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3a6cbe89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width  species\n",
       "0           5.1          3.5           1.4          0.2        0\n",
       "1           4.9          3.0           1.4          0.2        0\n",
       "2           4.7          3.2           1.3          0.2        0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "652c7055",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x = data.drop(columns='species', axis= 1 )\n",
    "y = data['species']\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.25, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "271c8b05",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "LR = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "076f3510",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7b0d9c50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9736842105263158\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report\n",
    "y_pred = LR.predict(x_test)\n",
    "acc_LR = accuracy_score(y_pred, y_test)\n",
    "print(acc_LR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5cb2030a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score for the logistic regression model is: 97.37\n",
      "classification report for our model is:               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        18\n",
      "           1       0.88      1.00      0.93         7\n",
      "           2       1.00      0.92      0.96        13\n",
      "\n",
      "    accuracy                           0.97        38\n",
      "   macro avg       0.96      0.97      0.96        38\n",
      "weighted avg       0.98      0.97      0.97        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "score = round(LR.score(x_test, y_test)*100,2)\n",
    "cls_report = classification_report(y_pred, y_test)\n",
    "print('accuracy score for the logistic regression model is:', score)\n",
    "print('classification report for our model is:', cls_report)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1549ba5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score of svc model is : 0.9736842105263158\n",
      "classification report of svc model is:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        18\n",
      "           1       0.88      1.00      0.93         7\n",
      "           2       1.00      0.92      0.96        13\n",
      "\n",
      "    accuracy                           0.97        38\n",
      "   macro avg       0.96      0.97      0.96        38\n",
      "weighted avg       0.98      0.97      0.97        38\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svc = SVC()\n",
    "svc.fit(x_train,y_train)\n",
    "y_pred_svc = svc.predict(x_test)\n",
    "acc_svc = accuracy_score(y_pred_svc,y_test)\n",
    "score_svc = round(svc.score(x_test, y_test)*100,2)\n",
    "cls_svc = classification_report(y_pred_svc, y_test)\n",
    "print('accuracy score of svc model is :', acc_svc)\n",
    "print('classification report of svc model is:')\n",
    "print(cls_svc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d03cccdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2], dtype=int64)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR.predict([[6.7, 3.0, 5.2, 2.3]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a7519787",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2], dtype=int64)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc.predict([[6.7, 3.0, 5.2, 2.3]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "07b5ee94",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "with open('svc_model.pkl', 'wb') as file:\n",
    "    pickle.dump(svc, file)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
